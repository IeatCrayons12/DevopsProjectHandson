name: CICD with Terraform

on:
  push:
    branches:
      - main

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ACCESS_SECRET_KEY }}
  TF_STATE_BUCKET_NAME: ${{ secrets.AWS_S3_BUCKET_NAME }}
  PRIVATE_SSH_KEY: ${{ secrets.AWS_SSH_ACCESS_KEY }}
  PUBLIC_SSH_KEY: ${{ secrets.AWS_SSH_ACCESS_PUBLIC }}
  AWS_REGION: ap-southeast-1

jobs:
  deploy-infra:
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.set-ip.outputs.SERVER_PUBLIC_IP }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Terraform Init
        id: init
        run: terraform init -backend-config="bucket=$TF_STATE_BUCKET_NAME" -backend-config="region=$AWS_REGION"
        working-directory: ./terraform

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan \
            -var="region=ap-southeast-1" \
            -var="private_key=${{ secrets.AWS_SSH_ACCESS_KEY }}" \
            -var="public_key=${{ secrets.AWS_SSH_ACCESS_PUBLIC }}" \
            -out=PLAN
        working-directory: ./terraform
      
      - name: Terraform Apply
        if: success()
        run: terraform apply -auto-approve PLAN
        env: 
          PRIVATE_SSH_KEY: ${{ secrets.AWS_SSH_ACCESS_KEY }}
          PUBLIC_SSH_KEY: ${{ secrets.AWS_SSH_ACCESS_PUBLIC }}
        working-directory: ./terraform
        id: apply

      - name: Set output variables
        run: echo "SERVER_PUBLIC_IP=$(terraform output -raw instance_public_ip)" >> $GITHUB_OUTPUT
        working-directory: ./terraform
        id: set-ip

  deploy-app:
    runs-on: ubuntu-latest
    needs: deploy-infra
    steps:
      - name: Set SERVER_PUBLIC_IP from deploy-infra
        run: echo "SERVER_PUBLIC_IP=${{ needs.deploy-infra.outputs.output1 }}" >> $GITHUB_ENV

      - name: Debug env SERVER_PUBLIC_IP
        run: echo "SERVER_PUBLIC_IP is $SERVER_PUBLIC_IP"

      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Debug ECR Login Information
        run: |
          echo "ECR Registry: ${{ steps.login-ecr.outputs.registry }}"
          echo "Docker Username: AWS"
          echo "Docker Password: $(aws ecr get-login-password --region ap-southeast-1 | head -c 8)******"  # Mask most of the password for security
          aws ecr get-login-password --region ap-southeast-1 > /dev/null || echo "Failed to fetch ECR password"

      - name: Login to ECR
        run: |
          echo "Attempting to log in to ECR"
          aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin 637423177853.dkr.ecr.ap-southeast-1.amazonaws.com
          if [ $? -eq 0 ]; then
            echo "Login to ECR succeeded!"
          else
            echo "Login to ECR failed!" >&2
            exit 1
          fi


      - name: Build, push docker image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: devops-node-app
          IMAGE_TAG: ${{ github.sha }}
          AWS_DEFAULT_REGION: ap-southeast-1
        run: |

          echo "REGISTRY is: $REGISTRY"
          echo "REPOSITORY is: $REPOSITORY"
          echo "IMAGE_TAG is: $IMAGE_TAG"

          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG ./nodeapp
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Docker Deploy image to EC2
        uses: appleboy/ssh-action@v0.1.0
        with:
          host: ${{ needs.deploy-infra.outputs.output1 }}
          username: ubuntu
          key: ${{ env.PRIVATE_SSH_KEY }}
          envs: |
           PRIVATE_SSH_KEY=${{ env.PRIVATE_SSH_KEY }}
           REGISTRY=${{ steps.login-ecr.outputs.registry }}
           REPOSITORY=devops-node-app
           IMAGE_TAG=${{ github.sha }}
           ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
           AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
           TF_STATE_BUCKET_NAME=${{ secrets.TF_STATE_BUCKET_NAME }}
           AWS_DEFAULT_REGION=${{ secrets.AWS_DEFAULT_REGION }}
           AWS_REGION=${{ secrets.AWS_REGION }}


          script: |
            #!/bin/bash


            # Set DEBIAN_FRONTEND to noninteractive to avoid the 'Dialog' error
            export DEBIAN_FRONTEND=noninteractive

            # Print environment variables to debug
            echo "REGISTRY is: $REGISTRY"
            echo "REGISTRY 2 is ${{ steps.login-ecr.outputs.registry }}"
            echo "IMAGE_TAG is: $IMAGE_TAG"

            # Reseting the value
             REGISTRY=${{ steps.login-ecr.outputs.registry }}
             IMAGE_TAG=${{ github.sha }}
             echo "REGISTRY 3 is: $REGISTRY"

            # Update system and install dependencies
            echo "Running: sudo apt-get update"
            sudo apt-get update -y
            echo "Running: sudo apt-get install -y apt-transport-https ca-certificates curl unzip software-properties-common"
            sudo apt-get install -y apt-transport-https ca-certificates curl unzip software-properties-common
            echo "Running: sudo apt-get install -y gnupg"
            sudo apt-get install -y gnupg

            # Install or Update AWS CLI
            echo "Running: curl 'https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip' -o awscliv2.zip"
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            echo "Running: unzip -o awscliv2.zip"
            unzip -o awscliv2.zip
            echo "Running: sudo ./aws/install --update"
            sudo ./aws/install --update

            # Install Docker
            echo "Running: sudo install -m 0755 -d /etc/apt/keyrings"
            sudo install -m 0755 -d /etc/apt/keyrings
            echo "Running: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor --batch --yes -o /etc/apt/keyrings/docker.gpg"
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor --batch --yes -o /etc/apt/keyrings/docker.gpg
            echo "Running: sudo chmod a+r /etc/apt/keyrings/docker.gpg"
            sudo chmod a+r /etc/apt/keyrings/docker.gpg

            # Add Docker's official repository to apt sources
            echo "Running: echo 'deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable' | sudo tee /etc/apt/sources.list.d/docker.list"
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

            # Update and install Docker
            echo "Running: sudo apt-get update"
            sudo apt-get update -y 
            echo "Running: sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin"
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

            # Authenticate Docker with AWS ECR
            echo "Running: $(aws ecr get-login-password --region ap-southeast-1 | sudo docker login --username AWS --password-stdin $REGISTRY)"
            $(aws ecr get-login-password --region ap-southeast-1 | sudo docker login --username AWS --password-stdin $REGISTRY)

            # Stop and remove any existing container
            echo "Running: sudo docker stop myappcontainer || true" 
            sudo docker stop myappcontainer || true
            echo "Running: sudo docker rm myappcontainer || true"
            sudo docker rm myappcontainer || true

            # Pull and run the new Docker image
            echo "Running: sudo docker pull $REGISTRY/$REPOSITORY:$IMAGE_TAG"
            echo "Using registry: $REGISTRY/$REPOSITORY:$IMAGE_TAG"
            sudo docker pull $REGISTRY/$REPOSITORY:$IMAGE_TAG
            echo "Running: sudo docker run -d --name myappcontainer -p 80:8000 $REGISTRY/$REPOSITORY:$IMAGE_TAG"
            sudo docker run -d --name myappcontainer -p 80:8000 $REGISTRY/$REPOSITORY:$IMAGE_TAG
